<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:disableMasterStylesheet="true" MadCap:tocPath="Creating Custom Probes" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Command Line Probes</title>
        <meta name="description" content="Dartware network monitoring: Testing the description tag." />
        <link href="../SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="../Resources/default.css" rel="stylesheet" />
        <script src="../SkinSupport/MadCapAll.js" type="text/javascript">
        </script>
    </head>
    <body>
        <div id="dartware_toclink" class="dartware_toclink"><a name="dartware_a" href="#">Show TOC</a>
        </div>
        <div class="pagewidth">
            <h1><a name="kanchor536"></a>Command Line Probes</h1>
            <p><a name="kanchor537"></a> InterMapper provides the ability to run a <i><a name="kanchor538"></a><a name="kanchor539"></a>command-line</i><a name="kanchor540"></a><a name="kanchor541"></a><a name="kanchor542"></a><a name="kanchor543"></a><a name="kanchor544"></a><a name="kanchor545"></a><a name="kanchor546"></a> probe, a script or program (written 
 in perl, C, C++, or your favorite language.) Your program's return value becomes the device's status on the 
 InterMapper map. 
</p>
            <p><a name="kanchor547"></a><a name="kanchor548"></a><a name="kanchor549"></a><a name="kanchor550"></a><a name="kanchor551"></a><a name="kanchor552"></a><a name="kanchor553"></a><a name="kanchor554"></a> The probe file uses the name of the program/script and its arguments. InterMapper then invokes the program, passing it the arguments. 
 InterMapper sets the device's status based on the return code from the 
 program/script. In addition, any data (up to 255 characters) written to the 
 script's standard output file is used as the device's condition string, and 
 will appear in the popup status window.
</p>
            <p><a name="nagios"></a>InterMapper's command-line probes are similar to                                 <b><a name="kanchor555"></a>Nagios® 
 plugins</b> (<a href="http://www.nagios.org">http://www.nagios.org</a>). You 
 can see the                                 <a href="http://sourceforge.net/project/showfiles.php?group_id=29880" name="kanchor556">standard 
 set of Nagios plugins.</a><a name="kanchor557"></a> Many vendors and individuals have created their own 
 Nagios plugins. You will have to download the Nagios plugins and build/compile 
 them yourself. 
</p>
            <p> If you wish to develop your own command-line probes, we recommend you follow 
 the developer guidelines for Nagios (found at <a href="http://nagiosplug.sourceforge.net/developer-guidelines.html">http://nagiosplug.sourceforge.net/developer-guidelines.html</a><a name="kanchor558"></a>). 
 This will result in probes/plugins that work for both InterMapper and Nagios. </p>
            <p>For more information about InterMapper and Nagios Plugins, see the<a href="nagios.htm"> Nagios Plugins page</a>.</p>
            <p>See <a href="cmdlineprobeexample.htm">Command Line Probe Example</a> for a sample shell script and corresponding probe.</p>
            <p>You can also embed script code directly in a probe. THis provides an easy way to deliver a command-line probe and a script that it runs in a single probe file, ensuring that the version of the script matches the version of the probe. WMI probes provide a number of good examples of companion scripts. For more information, see <a href="Companion_Scripts.htm">Companion Scripts</a>.</p>
            <h2>Command Line Script API</h2>
            <p>When InterMapper invokes a command line program/script, it will pass parameters<br />on the command line. The path, cmd, and arg variables of the &lt;command-line&gt;<br />section of the custom control the script that is invoked, and the arguments 
  that<br />are passed. The script developer is responsible for parsing the arguments. </p>
            <p>The script can return three kinds of information to InterMapper:</p>
            <ol>
                <li value="1">The operating system return code is used to indicate the<br />success/failure/severity. This will be handled by the &lt;command-exit&gt; section 
  of<br />the probe file.</li>
                <li value="2">The script can optionally return additional values (e.g., measurements) 
  that<br />are discovered during its operation by writing to the script's stdout. These 
  are<br />returned as a comma-separated list enclosed in "\{" ... "}" 
  characters. The<br />values themselves are name-value pairs in the form &lt;name&gt; := &lt;value&gt;. 
  The use of<br />a semicolon (";") was allowed in previous versions, however its use 
  is<br />deprecated. </li>
                <li value="3">The script can also return text that will be used as the device's condition<br />string by writing to the script's stdout. This text will follow the closing 
  "}"<br />of the additional values (if any). </li>
            </ol>
            <p><b>Example:</b> The following output from a script sets two values to the probe:<br /><i>$rtt </i>and <i>$hop</i>, and sets the device's condition string to "<i>Round-trip time 
  is very</i><br style="font-style: italic;" /><i>high</i>"</p>
            <pre class="code">\{ $rtt := 5, $hop := 2 } Round-trip time is very high<br /></pre>
            <h2 class="pagebreakbefore"><a name="kanchor559"></a><a name="kanchor560"></a>Installing a Command-line Probe</h2>
            <p><b>To install and use a command-line probe:</b>
            </p>
            <ol>
                <li value="1"><a name="kanchor561"></a><a name="kanchor562"></a><a name="kanchor563"></a> Create the program, and make it runnable. If it's a Perl, Python, or other 
 script, set the permissions so that it can run from the command line. If it's 
 written in C, C++, or other non-interpreted language, compile the source and 
 then place the resulting binary in an appropriate directory. (See the <a href="#path">path</a> discussion below.)
  </li>
                <li value="2"> Create a Command-line probe file (see the <a href="#clprobeformat"><i>next section</i></a>.) 
  </li>
                <li value="3"> Reload the probe (from the Set Probe window) to make it available. 
</li>
            </ol>
            <h2><a name="clprobeformat"></a><a name="kanchor564"></a>Command-line Probe File Format</h2>
            <p> The Command-line probe file has the following format. (See the <a href="cmdlineprobeexample.htm">Command Line Probe Example</a>.)
</p>
            <ul>
                <li value="1">Command-line probes follow the same format as described in <a href="Probe_File_Format.htm">Custom 
 Probe File Format.</a></li>
                <li value="2">In the <b>&lt;header&gt;</b><a name="kanchor565"></a><a name="kanchor566"></a><a name="kanchor567"></a><a name="kanchor568"></a><a name="kanchor569"></a><a name="kanchor570"></a> section of the file, make sure that the "type" 
 is "cmd-line". As with all probes, the "package" should be your reversed domain 
 name. By convention, it is also recommended that the first part of the "probe_name" 
 be "cmd". The rest of the "probe_name" should be something which will indicate 
 further what type of probe it is, as in "cmd.nagios.ping". The "version" should 
 be "1.0" and the "address_type" should be "IP".</li>
                <li value="3">The <b>&lt;description&gt;</b> section should contain a description that will 
 remind users what the probe actually does. </li>
                <li value="4">The <b>&lt;command-line&gt;</b><a name="kanchor571"></a> section allows you to specify the information 
 needed to execute the commands for the probe. There are three values:                                 <b><a name="kanchor572"></a>path</b>,                                 <b>cmd</b>, and                                 <b>arg</b>. 
    <ul type="o"><li value="1"><a name="path"></a> Use <b>path</b><a name="kanchor573"></a> to specify the directories in which InterMapper should 
 look for the executable to run as a probe. This is the only path InterMapper 
 will use; the PATH environment variable will not be used. The "path" follows 
 the conventions for the PATH environment variable on the system hosting 
 InterMapper. The example below is for Unix or Mac OS X. A path for Windows 
 would use "\" instead of "/" and ";" instead of ":". <br /><br /><b>Note:</b> If no path is specified, <i>InterMapper Settings/Tools</i> is used as the path.<br /><br /></li><li value="2">Use <b>cmd</b><a name="kanchor574"></a> to specify the executable you wish to run. In the example 
 below, this is "check_ping". Note that you need to specify the exact name, 
 including any extensions such as .exe or .cmd. You may also specify arguments 
 as part of the "cmd" value if you'd like. </li><li value="3">Use <b>arg</b> to specify arguments to the executable. This may be 
 instead of or in addition to specifying them in the "cmd" value. We could 
 have just as easily written our sample "cmd" value as a command and argument, 
 like this: 
  <br /><pre class="code"> cmd = "check_ping" <br />arg = "-H ${ADDRESS} -w 100,10% -c 1000,90%" </pre></li></ul><p class="indent"><a name="kanchor575"></a>Note the use of the "${ADDRESS}" macro. This will be replaced with 
 the address given when the device was created. You can use the "${PORT}" 
 macro to indicate the port given when the device was created. </p></li>
                <li value="5">The <b>&lt;command-exit&gt;</b><a name="kanchor576"></a> section allows you to specify which results 
 from the command indicate the four InterMapper device states. The four states 
 are "down", "alarm", "warning", and "okay". For each state, you need to indicate 
 what item InterMapper should examine and what its value should be to result 
 in that state being set. At the moment, the only thing InterMapper can look 
 at is the exit code, which is indicated with ${EXIT_CODE}. So, in the example 
 below, the line:<pre class="code"> down: ${EXIT_CODE} = 2 </pre> means, "To determine if the device is down, examine the exit code from 
 the command; if it is 2, the device is down." If none of the criteria for 
 the states you have defined are true, then the device is set to "unknown". 
    </li>
                <li value="6">The <b>&lt;command-data&gt;</b> section is not currently used and is ignored.</li>
                <li value="7">The <b>&lt;parameters&gt;</b><a name="kanchor577"></a> section allows you to pass arguments into the probe. The named arguments can be added to the command line. For example, use ${Timeout} for an parameter specified as:
	<br /><pre class="code">"Timeout" = "7"
</pre></li>
                <li value="8">The <b>&lt;command-display&gt;</b> section displays variables in the same form as the
<b>&lt;snmp-device-output&gt;</b> section of other probes. If the plugin returns a
non-integer value, you should use the ${chartable:...} macro to display digits
to the right of the decimal point.

</li>
            </ul>
            <p>See <a href="cmdlineprobeexample.htm">Command Line Probe Example</a> for a sample shell script and corresponding probe.</p>
        </div>
        <p>
            <script id="dartwarejs" name="dartwarejs" type="text/javascript" src="../dartware.js">
            </script>
        </p>
        <script type="text/javascript" src="../SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>