<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" class="" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../" data-mc-conditions="Primary.online,Primary.print" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Creating Your Own Probes|SNMP Probes|The &lt;snmp-device-alarmpoints&gt; Section">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Alarm Point File Format</title>
        <meta name="description" content="Dartware network monitoring: Testing the description tag." />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../Resources/default.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.previous-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.current-topic-index-button
{
	
}

.next-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../Resources/Scripts/PIE-no-motw.htc');
}

</style>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div id="dartware_toclink" class="dartware_toclink"><a name="dartware_a" href="#">Show TOC</a>
        </div>
        <div class="pagewidth">
            <h1 data-mc-conditions="Primary.online">Alarm Point File Format</h1>
            <p><a name="kanchor184"></a>Alarm points are defined in the &lt;snmp-device-alarmpoints&gt; section that contains several lines of the format:</p><pre class="code">&#160;&#160;name: severity (condition-to-test)  Condition-String  [  =&gt;  Notifier-list ]
</pre>
            <p>Here is an example:</p><pre class="code">&lt;snmp-device-alarmpoints&gt;
<br />-- Name:     Severity&#160;(Condition-to-Test)         &#160;Condition-String =&gt; Notifer-List
   SiteTemp: critical ($Temp &gt; $CriticalHighTemp) "VERY_HIGH_TEMP" =&gt; PageFred 
   SiteTemp:    major ($Temp &gt; $MajorHighTemp)    "HIGH_TEMP"      =&gt; PageFred 
<br />&lt;/snmp-device-alarmpoints&gt;</pre>
            <p>The fields of each entry are:
</p>
            <ul>
                <li value="1"><b>Name</b> is the name of the alarm point. If multiple lines in this section contain the same Name, then they will be treated as the different thresholds for the same alarm point.</li>
                <li value="2"><b>Severity</b> is one of 'critical', 'major', 'minor' or 'clear'. It defines the resulting severity of the given point test.</li>
                <li value="3"><b>Condition-to-test</b> is an expression that evaluates to a boolean result, e.g. "($Temp &gt; $CriticalHighTemp)" You can use variables from the &lt;snmp-device-variables&gt; section or the &lt;parameters&gt; section in your expression. See the Probe Calculations topic's <a href="probecalculations.htm">Expression Syntax section<a href="probecalculations.htm" class="MCXref xref "> </a></a> for details about valid expressions. In the example, $Temp is a variable read from the SNMP device; $CriticalHighTemp and $MajorHighTemp are parameters set by the user.</li>
                <li value="4"><b>Condition-String</b> is a string that describes the resulting status if the Condition-to-test evaluates to true.</li>
                <li value="5"><b>Notifier-list</b> is an optional, comma-delimited list of notifier names. The notifier names listed here are mapped to actual "InterMapper Notifier Names" via the &lt;snmp-device-notifiers&gt; section.</li>
            </ul>
            <p>When InterMapper evaluates alarm point expressions, it scans the list for a particular alarm point, and sets its status based on the first expression that "triggers". If no expression triggers, then InterMapper sets the alarm point severity to "Clear"</p><a name="macros"></a>
            <h2 class="pagebreakbefore">Macros</h2>
            <p>InterMapper supports several macros that show information about an alarm point:</p>
            <ul>
                <li value="1"><b>${alarmpointname}</b> shows the alarmpoint's severity as a five-character string. The strings are colored to match the severity. To use this facility, enter the alarmpoint name enclosed in ${...}. For example, to show the SiteTemp alarm point's severity (above), enter:
<br /><div class="code">${SiteTemp}</div><br />and it would generate the strings "CRIT ", "MAJOR", "MINOR", or "CLEAR", with the appropriate color.</li>
                <li value="2"><b>${alarmpointname:condition}</b> shows the alarmpoint's condition string, as defined in the &lt;snmp-device-alarmpoints&gt; section. For example, to show the SiteTemp alarm point's condition above, type:
<br /><div class="code">${SiteTemp:condition}</div><br />and it would generate the string "VERY_HIGH_TEMP". This string may contain any markup as described on the <a href="description.html">Probe File Description</a> page.</li>
            </ul>
            <h2>AlarmPoint Facilities</h2>
            <p>InterMapper provides several alarm point facilities:
</p>
            <h3><b>Underscore Feature</b>
            </h3>
            <p>Use the Underscore feature to control whether an alarm point is cleared permanently or temporarily when you reset the AlarmPointList.</p>
            <p>A device's AlarmPointList contains the following important information:
</p>
            <ul>
                <li value="1">alarm points that are <b>currently in alarm</b> (i.e., not in Clear state)</li>
                <li value="2">alarm points that were <b>recently in alarm</b>, but are now Clear.</li>
            </ul>
            <p>This minimizes the clutter in the AlarmPointList, so that it only contains relevant and interesting information. (All the other alarm points are assumed to be clear, and therefore can be ignored.)</p>
            <p>The "recently in alarm" qualifier deserves explanation. There is a link in the device's Status Window that allows you to "reset the alarm point list" and remove the cleared alarm points  
</p>
            <p>Alarm point names that begin with an underscore ("_") are treated in this way (hence the name of the facility.) For example: _SWO_PROC_SWO_PROC is an underscore alarm point, whereas SWO_PROC_SWO_PROC is treated as a normal alarm point.
</p>
            <h3 class="pagebreakbefore">    State Transitions</h3>
            <ul>
                <li value="1"><b>Startup</b>  When a map is opened, devices with alarm points are in the Unknown (grey) state, and their AlarmPointList is empty.</li>
                <li value="2"><b>Normal Operation:</b> As InterMapper receives information about a device's state, either from a poll or a received trap, it sets its icon color accordingly.
<br />If this information sets a new non-underscore alarm point (one whose state is currently not known), it is added to the AlarmPointList, in the proper color/severity. If it is for a new underscore alarm point, it is added to the AlarmPointList only if the severity is not Clear.
<br />If this new information updates an existing alarm point, then that point's severity will be updated in the AlarmPointList.</li>
                <li value="3"><b>Resetting the AlarmPointList:</b> When the user clicks an AlarmPointList's <b style="font-style: italic;">Reset</b> link in the status window, all the Clear alarm points are removed from the device's AlarmPointList. All alarm points that are in alarm (not Clear) remain in the list. <br /><br /><b>Note:</b> The <b style="font-style: italic;">Reset</b> link removes all "clear" alarm points, but the effect is permanent only for "underscore" alarm points. non-underscore alarm points are cleared temporarily; the cleared non-underscore alarm points reappear in the status page in the next refresh (unless the condition that resulted in "clear" severity has changed). </li>
            </ul>
            <br />
            <h3><b>Resetting to Neutral Alarm State</b>
            </h3>
            <p>InterMapper can receive a trap or some other command that sets a device into the "Startup" state described above. This is useful for the process of re-synchronizing InterMapper's notion of a device's state with its actual state. A single trap could indicate, "I don't know the state of a device" (perhaps because it had gone down, and now came back up), and InterMapper reflects that lack of certainty by clearing the alarm point list and turning the device grey.</p>
            <p>InterMapper provides a "reset" severity that resets the device to its "power on" state. That is, the device and all its alarm points are set to the Unknown state. Such an alarm point is never listed in the AlarmPointList. </p>
            <p>Usage:</p><pre class="code">DeviceResetRule: reset ( reset-condition ) condition-string =&gt; Notifier-List
</pre>
            <br />
            <p>If reset-condition is true and there are alarms to be cleared, an event log entry will be created for the action. If the condition-string is not empty, a notification will be sent to the Notifier-List.</p>
            <h3 class="pagebreakbefore">Facilities to speed up rule evaluation</h3>
            <p>We will implement a "Break" severity that will abort the processing of the remaining rules of the probe if ever its expression is true. Such an alarm point will never be listed in the AlarmPointList. </p>
            <p>Usage:</p><pre class="code">BreakRule: break ( break-condition ) condition-string =&gt; Notifier-List
</pre>
            <p>In a break rule, Notifier-List is not used. If the condition-string is not empty, an event log message will be created everytime this rule fires (this is done for debugging purposes).
</p>
            <h2>Sample probe</h2>
            <p>Below a sample probe that uses all the features decribed above. To test the probe, use the net-snmp <i>snmptrap</i> program to send traps to the device. For example, to set $trapVar to 5, use the following command line:
</p><pre class="code">snmptrap.exe -v2c -c community computername  '' 1.3.6.1.4.1.11898.2.1 1.3.6.1.4.1.11898.2.1.18.1.18 i 5
</pre>
            <p>In the sample probe below, three trap variables are used in three separate alarm points. The first group of alarm points (_trapVarAP) is an "underscore" alarm point, the state is not shown unless the alarm point reaches a non-clear state (minor, major, critical). Note that setting the $trapVar variable to 4 never brings the alarm point state to critical since there is a break rule right before the rule that brings the state to critical state:
</p><pre class="code">&lt;header&gt;<br />&#160;  type                =       "custom-snmp"
 &#160; package             =       "com.dartware"
 &#160; probe_name          =       "snmp.testalarmpoint"
  &#160;human_name          =       "Alarm point test example"
  &#160;version             =       "0.1"
  &#160;address_type        =       "IP,AT"
  &#160;flags               =       "SNMPv2c"
  &#160;port_number         =       "161"
&lt;/header&gt;
<br />&lt;description&gt;
    ...
&lt;/description&gt;
<br />&lt;snmp-device-variables&gt;<br />   trapVar,         1.3.6.1.4.1.11898.2.1.18.1.18, TRAPVARIABLE, "trap variable 1"
   trapVar2,        1.3.6.1.4.1.11898.2.1.18.1.19, TRAPVARIABLE, "trap variable 2"
   trapVar3,        1.3.6.1.4.1.11898.2.1.18.1.20, TRAPVARIABLE, "trap variable 3"<br />&lt;/snmp-device-variables&gt;
	
<br />&lt;snmp-device-notifiers&gt; 
   NotifySomeone: "NotifyFred:0:0:0"
&lt;/snmp-device-notifiers&gt;
<br />&lt;snmp-device-alarmpoints&gt; 
&#160;&#160;&#160;&#160;-- sample underscore alarm point
    -- the three reset alarm point have the same effect: resetting the device state to initial state
<br />&#160;&#160;&#160;&#160;_trapVarAP: clear ($trapVar == "2") "trapVar - clear" =&gt; NotifySomeone 
    _trapVarAP: reset ($trapVar == "3") "trapVar - reset" =&gt; NotifySomeone 
    _trapVarAP: minor (${trapVar} == "4") "trapVar - minor" =&gt; NotifySomeone 
    _trapVarAP: critical (${trapVar} == "5") "trapVar - major" =&gt; NotifySomeone 
    _trapVarAP: break ($trapVar == "6") "trapVar - break" =&gt; NotifySomeone 
    _trapVarAP: critical (${trapVar} &gt;= "6") "trapVar - critical" =&gt; NotifySomeone 
<br />&#160;&#160;&#160;&#160;-- other, normal alarm points
    trapVarAP2: clear ($trapVar2 == "2") "trapVar2 - clear" =&gt; NotifySomeone 
    trapVarAP2: reset ($trapVar2 == "3") "trapVar2 - reset" =&gt; NotifySomeone 
    trapVarAP2: break ($trapVar2 == "4") "trapVar2 - break" =&gt; NotifySomeone 
    trapVarAP2: critical (${trapVar2} &gt;= "4") "trapvar2 - critical" =&gt; NotifySomeone 
<br />&#160;&#160;&#160;&#160;trapVarAP3: clear ($trapVar3 == "2") "trapVar3 alarm" =&gt; NotifySomeone 
    trapVarAP3: reset ($trapVar3 == "3") "trapVar3 alarm" =&gt; NotifySomeone 
    trapVarAP3: break ($trapVar3 == "4") "trapVar4  alarm" =&gt; NotifySomeone 
    trapVarAP3: critical (${trapVar3} &gt;= "4") "trapvar alarm" =&gt; NotifySomeone 
&lt;/snmp-device-alarmpoints&gt; 
	
<br />&lt;snmp-device-display&gt;
    \B5\Trap variable values\0P\
    \4\trapvar:\0\ &#160;$trapVar, &#160;${_trapVarAP:condition}\0P\
    \4\trapvar2:\0\ $trapVar2, ${trapVarAP2:condition} \0P\
    \4\trapvar3:\0\ $trapVar3, ${trapVarAP3:condition} \0P\
<br />&#160;&#160;&#160;&#160;$alarmpointlist
&lt;/snmp-device-display&gt;
</pre>
            <p class="pagebreakafter">&#160;</p>
        </div>
        <p>
            <script id="dartwarejs" name="dartwarejs" type="text/javascript" src="../dartware.js">
            </script>
        </p>
        <div class="buttons inline-buttons clearfix topicToolbarProxy " style="mc-topic-toolbar-items: ;text-align: left;">
            <div class="button-group-container-left">
                <div class="button-group">
                    <button class="button needs-pie previous-topic-button" title="Navigate previous">
                    </button>
                    <div class="button current-topic-index-button disabled"><span class="sequence-index"></span> of <span class="sequence-total"></span></div>
                    <button class="button needs-pie next-topic-button" title="Navigate next">
                    </button>
                </div>
            </div>
        </div>
    </body>
</html>